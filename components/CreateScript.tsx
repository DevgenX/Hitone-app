import { FC, useState } from "react";

interface ScriptContent {
  [key: string]: string;
}

const CreateScript: FC = () => {
  const availableInputs = [
    { name: "name", label: "Your Name (optional)" },
    { name: "purpose", label: "Purpose of the Script" },
    { name: "content", label: "Script Content" },
    { name: "situation", label: "Situation (e.g., Business Meeting)" },
  ];

  const defaultFormData: ScriptContent = {};
  availableInputs.forEach((input) => {
    defaultFormData[input.name] = "";
  });

  const handleAddInputs = (inputName: string, inputLabel: string) => {
    const newInputs = { name: inputName, label: inputLabel };
    availableInputs.push(newInputs);
  };

  const [formData, setFormData] = useState<ScriptContent>(defaultFormData);
  const [generatedScript, setGeneratedScript] = useState<string | null>(null);
  const [inputName, setInputName] = useState<string>("");
  const [inputLabel, setInputLabel] = useState<string>("");

  // Track whether each input is in edit mode
  const [editMode, setEditMode] = useState<Record<string, boolean>>(
    Object.fromEntries(availableInputs.map((input) => [input.name, false]))
  );

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const toggleEditMode = (name: string) => {
    // Toggle edit mode for the specified input field
    setEditMode((prevEditMode) => ({
      ...prevEditMode,
      [name]: !prevEditMode[name],
    }));
  };

  const handleGenerateScript = async () => {
    // Make a POST request to the GPT-4 API with user input to generate a personalized script
    // Update the 'generatedScript' state with the response
    const response = await fetch("YOUR_GPT4_API_ENDPOINT", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    });
    const data = await response.json();
    setGeneratedScript(data.generatedScript);
  };

  return (
    <div className="container w-1/2 mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-center">
        Generate Your Script
      </h1>
      <div className="text-sm text-center">
        <p>
          To make the script more personalized and accurate, please provide
          descriptive details on the things you need for your script.
        </p>
        <small>
          Note that the script is generated by GPT-4 and may sometimes provide
          inaccurate information.
        </small>
      </div>
      <form className="mb-8 text-black">
        {availableInputs.map((input) => (
          <div key={input.name} className="my-5">
            <label
              htmlFor={input.name}
              className="block text-sm font-medium text-white"
            >
              {input.label}:
            </label>
            {editMode[input.name] ? (
              // Show an input field in edit mode
              <input
                type="text"
                id={input.name}
                name={input.name}
                value={formData[input.name]}
                onChange={handleInputChange}
                className="border border-gray-300 rounded-md p-2 w-full"
              />
            ) : (
              // Show read-only text in view mode
              <div
                onClick={() => toggleEditMode(input.name)}
                className="border border-gray-300 rounded-md p-2 w-full cursor-pointer"
              >
                {formData[input.name]}
              </div>
            )}
          </div>
        ))}
      </form>
      <div className="flex">
        <div className="pr-4">
          <button
            onClick={handleGenerateScript}
            className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
          >
            Generate Script
          </button>
        </div>
        <button
          onClick={() => handleAddInputs(inputName, inputLabel)}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
        >
          Add more inputs
        </button>
      </div>
      {generatedScript && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold mb-2">Generated Script:</h2>
          <p className="whitespace-pre-line">{generatedScript}</p>
        </div>
      )}
    </div>
  );
};

export default CreateScript;
