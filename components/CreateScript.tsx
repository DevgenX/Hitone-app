import { FC, useState } from "react";

import { availableInputs } from "@/helpers/availableInputs";
import Loading from "./ui/Loading";

import Recording from "./Recording";
import Script from "./ui/Script";

export interface ScriptContent {
  [key: string]: string;
}

const CreateScript: FC = () => {
  const defaultFormData: ScriptContent = Object.fromEntries(
    availableInputs.map((input) => [input.name, ""])
  );

  const [formData, setFormData] = useState<ScriptContent>(defaultFormData);
  const [generatedScript, setGeneratedScript] = useState<
    string | null | Promise<string>
  >("");
  const [inputName, setInputName] = useState<string>("");
  const [inputLabel, setInputLabel] = useState<string>("");
  const [isDisabled, setIsDisabled] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // const handleAddInputs = (
  //   inputName: string,
  //   inputLabel: string,
  //   placeholder?: string
  // ) => {
  //   const newInputs = {
  //     name: inputName,
  //     label: inputLabel,
  //     placeholder: placeholder || "",
  //   };
  //   availableInputs.push(newInputs);
  // };

  const [editMode, setEditMode] = useState<Record<string, boolean>>(
    Object.fromEntries(availableInputs.map((input) => [input.name, false]))
  );

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  const toggleEditMode = (name: string) => {
    setEditMode((prevEditMode) => ({
      ...prevEditMode,
      [name]: !prevEditMode[name],
    }));
  };

  const handleGenerateScript = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt: formData }),
      });
      if (!response.ok) {
        setIsLoading(false);
        throw new Error(response.statusText);
      }
      setIsLoading(false);

      const data = await response.json();

      if (!data) {
        return;
      }

      setGeneratedScript(data);
    } catch (error) {
      console.error("Error generating script:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto flex flex-col justify-center items-center">
      {isLoading ? (
        <Loading text="Generating Script" />
      ) : (
        <>
          {generatedScript ? (
            <>
              <div className="flex flex-row w-1/2 justify-between items-stretch border min-h-[600px] mt-20">
                <div className="flex flex-col flex-grow m-5 mt-20 p-5 min-w-[350px]">
                  <Recording />
                </div>
                {generatedScript && (
                  <div className="rounded-md flex-grow flex p-5 mt-20 max-h-[400px]">
                    <div className=" p-5 overflow-hidden hover:overflow-y-scroll">
                      <h2 className="text-xl text-center font-semibold mb-2">
                        Generated Script:
                      </h2>
                      <p className="whitespace-pre-line">{generatedScript}</p>
                    </div>
                  </div>
                )}
              </div>
              <div className="text-center mt-10">
                <button
                  className="border border-gray-500 rounded-full p-2 hover:border-gray-200"
                  onClick={() => setGeneratedScript("")}
                >
                  Regenerate
                </button>
              </div>
            </>
          ) : (
            <div className="w-1/2 flex flex-col justify-center mt-20">
              <h1 className="text-2xl font-bold mb-2 text-center">
                Generate Your Speech
              </h1>
              <div className="text-sm text-center">
                <p className="py-2">
                  To make the script more personalized and accurate, please
                  provide descriptive details on the things you need for your
                  speech.
                </p>
                <small>
                  Note that the script is generated by GPT-4 and may sometimes
                  provide inaccurate information.
                </small>
              </div>
              <form className="text-black">
                <Script
                  formData={formData}
                  editMode={editMode}
                  onInputChange={handleInputChange}
                  toggleEditMode={toggleEditMode}
                />
              </form>
              <div className="flex flex-row">
                <div className="pr-4">
                  <button
                    onClick={handleGenerateScript}
                    className={`${
                      isDisabled
                        ? "cursor-not-allowed"
                        : "cursor-pointer hover:bg-blue-600"
                    } bg-blue-500  text-white py-2 px-4 rounded-md`}
                  >
                    Generate Script
                  </button>
                </div>
                {/* <button
                  onClick={() => handleAddInputs(inputName, inputLabel)}
                  className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
                >
                  Add more inputs
                </button> */}
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default CreateScript;
