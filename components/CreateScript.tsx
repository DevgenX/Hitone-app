import { FC, useState } from "react";

import { generateScript } from "@/utils/stream";
import { availableInputs } from "@/helpers/availableInputs";

import Recording from "./Recording";

import Script from "./ui/Script";

export interface ScriptContent {
  [key: string]: string;
}

const CreateScript: FC = () => {
  const defaultFormData: ScriptContent = {};
  availableInputs.forEach((input) => {
    defaultFormData[input.name] = "";
  });

  const [formData, setFormData] = useState<ScriptContent>(defaultFormData);
  const [generatedScript, setGeneratedScript] = useState<string | null>(null);
  const [inputName, setInputName] = useState<string>("");
  const [inputLabel, setInputLabel] = useState<string>("");

  const handleAddInputs = (
    inputName: string,
    inputLabel: string,
    placeholder?: string
  ) => {
    const newInputs = {
      name: inputName,
      label: inputLabel,
      placeholder: placeholder || "",
    };
    availableInputs.push(newInputs);
  };

  const [editMode, setEditMode] = useState<Record<string, boolean>>(
    Object.fromEntries(availableInputs.map((input) => [input.name, false]))
  );

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const toggleEditMode = (name: string) => {
    setEditMode((prevEditMode) => ({
      ...prevEditMode,
      [name]: !prevEditMode[name],
    }));
  };

  const handleGenerateScript = async () => {
    try {
      const getSpeechData = await generateScript(formData);
      setGeneratedScript(getSpeechData);
    } catch (error) {
      console.error("Error generating script:", error);
    }
  };

  return (
    <div className="container w-1/2 mx-auto p-4">
      {generatedScript ? (
        ""
      ) : (
        <>
          <h1 className="text-2xl font-bold mb-2 text-center">
            Generate Your Speech
          </h1>
          <div className="text-sm text-center">
            <p className="py-2">
              To make the script more personalized and accurate, please provide
              descriptive details on the things you need for your script.
            </p>
            <small>
              Note that the script is generated by GPT-4 and may sometimes
              provide inaccurate information.
            </small>
          </div>
        </>
      )}

      {generatedScript ? (
        <div className="flex flex-row justify-between items-center">
          <div className="flex flex-col flex-grow m-5 p-5">
            <h1 className="text-center p-3">Start Recording</h1>
            <Recording />
          </div>
          {generatedScript && (
            <div className="border p-5 border-gray-400 bg-slate-700 rounded-md flex-grow">
              <div className="mt-4">
                <h2 className="text-xl font-semibold mb-2">
                  Generated Script:
                </h2>
                <p className="whitespace-pre-line">{generatedScript}</p>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div>
          <form className="mb-8 text-black">
            <Script
              formData={formData}
              editMode={editMode}
              onInputChange={handleInputChange}
              toggleEditMode={toggleEditMode}
            />
          </form>
          <div className="flex">
            <div className="pr-4">
              <button
                onClick={handleGenerateScript}
                className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
              >
                Generate Script
              </button>
            </div>
            <button
              onClick={() => handleAddInputs(inputName, inputLabel)}
              className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md"
            >
              Add more inputs
            </button>
          </div>
        </div>
      )}
      {/* {generatedScript && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold mb-2">Generated Script:</h2>
          <p className="whitespace-pre-line">{generatedScript}</p>
        </div>
      )} */}
    </div>
  );
};

export default CreateScript;
